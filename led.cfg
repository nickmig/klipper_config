# The following was copied from Whistlinric
# Keywords can be identified in M117 commands e.g. "Printing has been completed" == 'complete'


####################################################################
#          Low level WLED macros via moonraker
####################################################################

# Set LCD RGB at startup
[delayed_gcode RESETRGB_ONSTARTUP]
initial_duration: 5
gcode:
    RESETRGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob (not correct for my voronpi 2.4)
##  Index 3 = display, Index 1 and 2 = Knob

[gcode_macro RESETRGB]
description: Default RGB for display and printer lights
gcode:
    #insert lcd rgb reset code here
    _LIGHTS_FLICKER

[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset
gcode:
  {% set strip = params.STRIP|string %}
  {% set preset = params.PRESET|default(-1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}

[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}

[gcode_macro SET_WLED]
description: SET_LED like functionlity for WLED
gcode:
    {% set strip = params.STRIP|string %}
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set index = params.INDEX|default(-1)|int %}
    {% set transmit = params.TRANSMIT|default(1)|int %}

    {action_call_remote_method("set_wled",
                               strip=strip,
                               red=red, green=green, blue=blue, white=white,
                               index=index, transmit=transmit)}

####################################################################
#          Macros
####################################################################
[gcode_macro _status_presets]
variable_off: -99
variable_lookup: {
        'off': 5,
        'ready': 2,
        'busy':  6,
        'heating': 4,
        'extruder': 13,
        'leveling': 8,
        'homing': 9,
        'meshing': 10,
        'printing': 11,
        'complete': 12,
        'busy':  6
    }
gcode:
    # Do nothing
    
[gcode_macro LIGHTS]
description: Example LIGHTS R=1 G=0 B=0 or LIGHTS PS=4 or e.g. LIGHTS STATUS=printing
gcode:
    {% set R = params.R|default(1)|float %}
    {% set G = params.G|default(1)|float %}
    {% set B = params.B|default(1)|float %}
    {% set PS = params.PS|default(-1)|int %}
    {% set STATUS = params.STATUS|default('')|string %}
    
    {% if STATUS != '' %}
        {% set PS = printer["gcode_macro _status_presets"].lookup[STATUS] %}
    {% endif %}
    
    {% if PS == printer["gcode_macro _status_presets"].off %}
        LIGHTS_OFF
    {% elif PS >= 0 %}
        WLED_ON STRIP=lights PRESET={PS}
    {% else %}
        SET_WLED STRIP=lights RED={R} GREEN={G} BLUE={B} TRANSMIT=1
    {% endif %}

[gcode_macro LIGHTS_OFF]
description: WLED lights and LCD lights off
gcode:
    WLED_OFF STRIP=lights

[gcode_macro LIGHTS_RANDOM]
gcode:
    {% for led in range(79|int) %}
        SET_WLED STRIP=lights RED={(range(0,100) | random) / 100} GREEN={(range(0,100) | random) / 100} BLUE={(range(0,100) | random) / 100} INDEX={led+1} TRANSMIT=1
        G4 P15
    {% endfor %}

# For M117 messages looks for the _status_presets strings in increasing priority order
# in the message, a status determined to be printing will perform a M117 to allow printing
# progress status to be displayed on the LCD
[gcode_macro M117]
rename_existing: M117.1
gcode:
    {% set ns = namespace(printing=false) %}
    
    # Check if M117 is empty - back to ready status
    {% if rawparams|trim == '' %}
        LIGHTS STATUS=ready
    {% else %}
        # Look for status names in message text
        {% for key, value in printer["gcode_macro _status_presets"].lookup.items() %}
             {% if key.upper() in rawparams.upper() %}
                 LIGHTS STATUS='{key}'                  # could also use value as PS=
                 
                 {% if key == 'printing' %}
                    {% set ns.printing=true %}
                 {% elif ns.printing %}
                    {% set ns.printing=false %}
                 {% endif %}
             {% endif %}
        {% endfor %}
    {% endif %}
    
    # Don't show a 'printing' message so that status updates on the lcd
    {% if ns.printing %}
        M117.1
    {% else %}
        M117.1 {rawparams}
    {% endif %}

###############################
# TimBot99 neat "turn-on" macro
[gcode_macro _LIGHTS_FLICKER]
gcode:
    {% set LEDTimes = [10, 20, 20, 240, 20, 40, 20, 100, 20, 20, 20, 260, 80, 20, 240, 60, 160, 20, 240, 20, 1000, 20, 20, 40, 100, 20, 274, 340, 860, 20, 1400, 20, 60, 20] %}
    {% set LED_Strip = "lights" %}
    # Target colour is a warm white
    {% set R = 255/255 %}
    {% set G = 191/255 %}
    {% set B = 130/255 %}

    {% for toggletime in LEDTimes %}
      {% set ledTime = toggletime|string %}
      {% set loopCount = loop.index %}

      {% if loopCount is divisibleby 2 %} # If the loop index is divisible by 2 (first index is NOT so the LEd should turn ON)
        SET_WLED STRIP=lights RED={R} GREEN={G} BLUE={B} TRANSMIT=1
        G4 P{ledTime|int}
      {% else %}
        SET_WLED STRIP=lights RED=0 GREEN=0 BLUE=0 TRANSMIT=1
        G4 P{ledTime|int}
      {% endif %}

    {% endfor %}
